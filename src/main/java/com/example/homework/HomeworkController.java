package com.example.homework;import org.springframework.web.bind.annotation.*;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.PrintStream;import java.net.InetAddress;import java.net.UnknownHostException;import java.time.DateTimeException;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.Objects;import java.util.Scanner;import java.util.regex.Matcher;import java.util.regex.Pattern;import java.util.stream.Collector;import java.util.stream.Collectors;import java.util.stream.Stream;@RestController@RequestMapping("/")public class HomeworkController {    @GetMapping("/")    @ResponseBody    public String index(){        String studentNumber = "";        String name = "";        String surname = "";        return String.join(" ",studentNumber,name,surname);    };    //  Verilen bir cümle içindeki kelimeleri harf sırasına göre dizi şeklinde dönünüz.    @GetMapping("cevap1")    @ResponseBody    public String[] answer1(@RequestParam String metin){        return Stream.of(metin.split(" "))                .sorted()                .toList().toArray(new String[metin.split(" ").length]);    }    // Verilen operatöre göre matematiksel işlemi yapıp sonucunu dönünüz.    @GetMapping("cevap2")    @ResponseBody    public String answer2(@RequestParam String op, @RequestParam int sayi1, @RequestParam int sayi2){        return switch (op) {            case "+" -> String.valueOf(sayi1 + sayi2);            case "-" -> String.valueOf(sayi1 - sayi2);            case "*" -> String.valueOf(sayi1 * sayi2);            case "/" -> {                if (sayi2 == 0)                    yield String.valueOf(-1);                yield String.valueOf(sayi1 / sayi2);            }            default -> String.valueOf(-1);        };    }    @GetMapping(value = "cevap3", params = "format")    @ResponseBody    public String answer3(@RequestParam String format){        LocalDateTime time = LocalDateTime.now();        if (format == null)            format = "dd-MM-YYYY HH:mm";        return time.format(DateTimeFormatter.ofPattern(format));    }    @GetMapping("cevap3")    @ResponseBody    public String answer3(){        return answer3(null);    }    /**     * <h1>     *     IP adresinin ulaşılabilirliğini kontrol eder.     * </h1>     * @param ip Kontrol edilecek olan IP adresi     * @return Ulaşılabilirse 'true', ulaşılamazsa 'false'     */    private boolean isIpReachable(String ip){        try {            InetAddress address = InetAddress.getByName(ip);            return address.isReachable(10000);        } catch (UnknownHostException e) {            return false;        } catch (IOException e) {            throw new RuntimeException(e);        }    }    @PostMapping("cevap4")    @ResponseBody    public String answer4(@RequestBody String IP){        if (IP.startsWith("\""))            IP = IP.substring(1);        if (IP.endsWith("\""))            IP = IP.substring(0,IP.lastIndexOf('"'));        String regex = "^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$";        Pattern pattern = Pattern.compile(regex);        Matcher matcher = pattern.matcher(IP);        return String.valueOf(matcher.matches());    }    @PostMapping("cevap5")    @ResponseBody    public String answer5(@RequestBody Exam5 data){        try{            File file = new File(data.getKlasorAdresi());            File out = new File(data.getSonucDosyasiAdi());            if (!out.exists() && !out.createNewFile()){                return "File could not created";            }            FileOutputStream fileOut = new FileOutputStream(out);            PrintStream printStream = new PrintStream(fileOut);            if (file.isDirectory()){                for (File subFile : Objects.requireNonNull(file.listFiles())){                    if (subFile.length() > data.getSize()){                        printStream.printf("%s (%s bytes)%n",subFile.getAbsolutePath(),subFile.length());                    }                }            }            return out.getAbsolutePath();        }catch (IOException exception){            return "File could not created";        }    }}